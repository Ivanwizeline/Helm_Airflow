---
# Source: earnest-airflow2/charts/airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
---
# Source: earnest-airflow2/charts/airflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YWlyZmxvdw=="
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  labels:
    app: redis
    chart: redis-10.5.7
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  redis-password: "YWlyZmxvdw=="
---
# Source: earnest-airflow2/charts/airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-config-envs
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "cmVsZWFzZS1uYW1lLXBnYm91bmNlci5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs"
  DATABASE_PORT: "NjQzMg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvdw=="

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"
  ## bash command which echos the DB connection string in `psql` cli format
  ## NOTE: uses `127.0.0.1` as the host because this is only used in the pgbouncer liveness probe
  ##       and minikube does not allow pods to access their own `cluster.local` service so would otherwise fail
  DATABASE_PSQL_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAxMjcuMC4wLjE6JHtEQVRBQkFTRV9QT1JUfS8ke0RBVEFCQVNFX0RCfSR7REFUQUJBU0VfUFJPUEVSVElFU30i"

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3M="
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="

  ## ================
  ## Airflow Configs (Database)
  ## ================
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  ## `core.sql_alchemy_conn` moved to `database.sql_alchemy_conn` in airflow 2.3.0
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "YWlyZmxvdzItZWFybmVzdA=="
  AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY: "YWlyZmxvdzItZWFybmVzdA=="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "Mi42LjMuMg=="
  AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG: "Mi42LjMuMg=="
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="
  AIRFLOW__KUBERNETES_EXECUTOR__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__ENABLE_XCOM_PICKLING": "dHJ1ZQ=="
  "AIRFLOW__CORE__LOAD_EXAMPLES": "RmFsc2U="
  "AIRFLOW__CORE__PARALLELISM": "MzI="
  "AIRFLOW__KUBERNETES_SECRETS__VAULT_TOKEN": "YWlyZmxvdy1kYWdzLXNlY3JldHM9dmF1bHRfdG9rZW4="
  "AIRFLOW__KUBERNETES__NAMESPACE": "YWlyZmxvdy0y"
  "AIRFLOW__KUBERNETES__RUN_AS_USER": "MTAwMA=="
  "AIRFLOW__SCHEDULER__RUN_DURATION": "NDMyMDA="
  "AIRFLOW__WEBSERVER__BASE_URL": "aHR0cHM6Ly97eyAuRW52aXJvbm1lbnQuVmFsdWVzLkFJUkZMT1dfV0VCX0hPU1QgfX0="
  "AIRFLOW__WEBSERVER__EXPOSE_CONFIG": "RmFsc2U="
  "AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT": "MzYw"
  "AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT": "MzYw"
  "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  "BOOTSTRAP_ADMIN_USER": "dHJ1ZQ=="
  "ENVIRONMENT": "bG9jYWw="
  "GENERATION": "MQ=="
  "NEW_RELIC_ENVIRONMENT": ""
  "SNOWFLAKE_TOKEN_GENERATOR_URL": "aHR0cHM6Ly9zbm93Zmxha2UtdG9rZW4tZ2VuZXJhdG9yLms4cy5kYXRhLW9yZy5wcm9kdWN0aW9uLmVhcm5lc3QuY29t"
---
# Source: earnest-airflow2/charts/airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-webserver-config
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdGhlIFNRTEFsY2hlbXkgY29ubmVjdGlvbiBzdHJpbmcKU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkgPSBjb25mLmdldCgnY29yZScsICdTUUxfQUxDSEVNWV9DT05OJykKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREI="
---
# Source: earnest-airflow2/charts/airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygxKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: earnest-airflow2/charts/airflow/templates/pgbouncer/pgbouncer-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
data:
  pgbouncer.ini: "CltkYXRhYmFzZXNdCiogPSBob3N0PXJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwgcG9ydD01NDMyCgpbcGdib3VuY2VyXQpwb29sX21vZGUgPSB0cmFuc2FjdGlvbgptYXhfY2xpZW50X2Nvbm4gPSAxMDAwCmRlZmF1bHRfcG9vbF9zaXplID0gIDIwCmlnbm9yZV9zdGFydHVwX3BhcmFtZXRlcnMgPSBleHRyYV9mbG9hdF9kaWdpdHMKCmxpc3Rlbl9wb3J0ID0gNjQzMgpsaXN0ZW5fYWRkciA9ICoKCmF1dGhfdHlwZSA9IG1kNQphdXRoX2ZpbGUgPSAvaG9tZS9wZ2JvdW5jZXIvdXNlcnMudHh0Cgpsb2dfZGlzY29ubmVjdGlvbnMgPSAwCmxvZ19jb25uZWN0aW9ucyA9IDAKCiMgbG9ja3Mgd2lsbCBuZXZlciBiZSByZWxlYXNlZCB3aGVuIGBwb29sX21vZGU9dHJhbnNhY3Rpb25gIChhaXJmbG93IGluaXRkYi91cGdyYWRlZGIgc2NyaXB0cyBjcmVhdGUgbG9ja3MpCnNlcnZlcl9yZXNldF9xdWVyeSA9IFNFTEVDVCBwZ19hZHZpc29yeV91bmxvY2tfYWxsKCkKc2VydmVyX3Jlc2V0X3F1ZXJ5X2Fsd2F5cyA9IDEKCiMjIENMSUVOVCBUTFMgU0VUVElOR1MgIyMKY2xpZW50X3Rsc19zc2xtb2RlID0gcHJlZmVyCmNsaWVudF90bHNfY2lwaGVycyA9IG5vcm1hbApjbGllbnRfdGxzX2tleV9maWxlID0gL2hvbWUvcGdib3VuY2VyL2dlbmVyYXRlZC1jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2dlbmVyYXRlZC1jZXJ0cy9jbGllbnQuY3J0CgojIyBTRVJWRVIgVExTIFNFVFRJTkdTICMjCnNlcnZlcl90bHNfc3NsbW9kZSA9IHByZWZlcgpzZXJ2ZXJfdGxzX2NpcGhlcnMgPSBub3JtYWw="
  gen_auth_file.sh: "CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI="
  gen_self_signed_cert.sh: "CiMhL2Jpbi9zaCAtZQoKQ0VSVF9ESVI9Ii9ob21lL3BnYm91bmNlci9nZW5lcmF0ZWQtY2VydHMiCktFWV9GSUxFPSIkQ0VSVF9ESVIvY2xpZW50LmtleSIKQ0VSVF9GSUxFPSIkQ0VSVF9ESVIvY2xpZW50LmNydCIKCiMgY3JlYXRlIHRoZSBkaXJlY3RvcnkgZm9yIHRoZSBzZWxmLXNpZ25lZCBjZXJ0aWZpY2F0ZQpta2RpciAtcCAiJENFUlRfRElSIgoKIyB2YXJpYWJsZXMgZm9yIGNlcnRpZmljYXRlIGdlbmVyYXRpb24KQ09NTU9OX05BTUU9ImxvY2FsaG9zdCIKREFZU19WQUxJRD0zNjUKCiMgZ2VuZXJhdGUgdGhlIHNlbGYtc2lnbmVkIGNlcnRpZmljYXRlIGFuZCBhIHByaXZhdGUga2V5Cm9wZW5zc2wgcmVxIC14NTA5IFwKICAtbmV3a2V5IHJzYTo0MDk2IFwKICAta2V5b3V0ICIkS0VZX0ZJTEUiIFwKICAtb3V0ICIkQ0VSVF9GSUxFIiBcCiAgLWRheXMgIiREQVlTX1ZBTElEIiBcCiAgLXN1YmogIi9DTj0kQ09NTU9OX05BTUUiIFwKICAtbm9kZXMKCiMgc2V0IHBlcm1pc3Npb25zIGZvciB0aGUgcHJpdmF0ZSBrZXkgZmlsZQpjaG1vZCA2MDAgIiRLRVlfRklMRSIKCmVjaG8gIlN1Y2Nlc3NmdWxseSBnZW5lcmF0ZWQgc2VsZi1zaWduZWQgY2VydGlmaWNhdGU6ICRDRVJUX0ZJTEUiCmVjaG8gIlN1Y2Nlc3NmdWxseSBnZW5lcmF0ZWQgc2VsZi1zaWduZWQgY2VydGlmaWNhdGUga2V5OiAkS0VZX0ZJTEUi"
---
# Source: earnest-airflow2/charts/airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: earnest-airflow2/templates/secrets/airflow.yaml
apiVersion: v1
kind: Secret
metadata:
    name: airflow-dags-secrets
    namespace: airflow-2 
stringData:
    environment: development 
    vault_url: https://vault.staging.earnest.com # "https://vault.staging.earnest.com"
    vault_port: "443" # "443"
    vault_key: airflow # "airflow"
    vault_token: a446702d-d31c-4b72-9494-63a7759d2f98 #"a446702d-d31c-4b72-9494-63a7759d2f98"
    secret_key: super-safe-key #"THIS IS UNSAFE!"
    fernet_key: mega-safe-key #"7T512UXSSmBOkpWimFHIVb8jK6lfmSAvx4mO6Arehnc="
---
# Source: earnest-airflow2/templates/secrets/http-git.yaml
apiVersion: v1
kind: Secret # this can be created straight from Vault with a CDR 
metadata:
  name: airflow-http-git-secret 
  namespace: airflow-2 
  labels:
    helm.sh/chart: earnest-airflow2-0.1.0
    app.kubernetes.io/name: earnest-airflow2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
stringData:
  username: Ivanwizeline 
  password: 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
---
# Source: earnest-airflow2/templates/secrets/logs-secret.yaml
apiVersion: v1
kind: Secret # this can be created straight from Vault with a CDR 
metadata:
  name: log-aws-token
  namespace: airflow-2 
  labels:
    helm.sh/chart: earnest-airflow2-0.1.0
    app.kubernetes.io/name: earnest-airflow2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
stringData:  
  AWS_ACCESS_KEY_ID: AWS-KEY-ID-TEST     
  AWS_SECRET_ACCESS_KEY: AWS-KEY-TEST
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  labels:
    app: redis
    chart: redis-10.5.7
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  labels:
    app: redis
    chart: redis-10.5.7
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: earnest-airflow2/charts/airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pod-template
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
data:
  pod_template.yaml: |-
    
    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      serviceAccountName: release-name
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      containers:
        - name: base      
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:        
            - secretRef:
                name: release-name-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor        
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          ports: []
          command: []
          args: []
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:        
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      volumes:    
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
---
# Source: earnest-airflow2/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: dags-pvc
  namespace: airflow-2 
  labels:
    type: local
spec:
  storageClassName: hostpath
  capacity:
    storage: 1Gi
  accessModes:
    - ReadOnlyMany
  hostPath:
    path: /Users/ivanpachon/Documents/Earnest/data-airflow-dags/dags
---
# Source: earnest-airflow2/charts/airflow/templates/pvc-logs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-logs
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "hostpath"
---
# Source: earnest-airflow2/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dags-pvc
  namespace: airflow-2
spec:
  storageClassName: hostpath
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 1Gi
  volumeName: dags-pvc
---
# Source: earnest-airflow2/charts/airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: earnest-airflow2/charts/airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name
subjects:
- kind: ServiceAccount
  name: release-name
  namespace: default
---
# Source: earnest-airflow2/charts/airflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "release-name"
---
# Source: earnest-airflow2/charts/airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "release-name"
    role: master
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: release-name
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
# Source: earnest-airflow2/charts/airflow/templates/pgbouncer/pgbouncer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: release-name
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
# Source: earnest-airflow2/charts/airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: release-name
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: earnest-airflow2/charts/airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 37898f38b90abd06081105d992362ec9e0d0015123b69e758e59031a9e6ddfc9
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:        
        - name: check-db  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: db-migrations          
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
        - name: scripts
          secret:
            secretName: release-name-db-migrations
---
# Source: earnest-airflow2/charts/airflow/templates/pgbouncer/pgbouncer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      ## multiple pgbouncer pods can safely run concurrently
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-pgbouncer: e66d95d3dbf590c945af8c3968d6154f3949240c44eeec7df3e820561532159a
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: release-name
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.18.0-patch.1
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            {}
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - "/usr/bin/dumb-init"
            ## rewrite SIGTERM as SIGINT, so pgbouncer does a safe shutdown
            - "--rewrite=15:2"
            - "--"
          args:
            - "/bin/sh"
            - "-c"
            ## we generate users.txt on startup, because DATABASE_PASSWORD is defined from a Secret,
            ## and we want to pickup the new values on container restart (possibly due to livenessProbe failure)
            - |-
              /home/pgbouncer/config/gen_self_signed_cert.sh && \
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-c"
                ## this check is intended to fail when the DATABASE_PASSWORD secret is updated,
                ## which would cause `gen_auth_file.sh` to run again on container start
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: release-name-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 0755
              - key: gen_self_signed_cert.sh
                path: gen_self_signed_cert.sh
                mode: 0755
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
---
# Source: earnest-airflow2/charts/airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 0a367e0361437a7c3a320840fb905c0d5b177220d5d38bb3acbb33624b5ccd91
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:        
        - name: check-db  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: airflow-scheduler          
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
        - name: pod-template
          configMap:
            name: release-name-pod-template
---
# Source: earnest-airflow2/charts/airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: 3d81bb542e2f32dbf7a7c63939a0a955f04e3e01d85d3dfdbc9d026f77688d17
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:        
        - name: check-db  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: sync-airflow-users          
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
        - name: scripts
          secret:
            secretName: release-name-sync-users
---
# Source: earnest-airflow2/charts/airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: release-name
      securityContext:
        fsGroup: 0
      initContainers:        
        - name: check-db  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: airflow-triggerer          
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:                
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  # shared imports
                  try:
                      from airflow.jobs.job import Job
                  except ImportError:
                      # `BaseJob` was renamed to `Job` in airflow 2.6.0
                      from airflow.jobs.base_job import BaseJob as Job
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  # heartbeat check imports
                  try:
                      from airflow.jobs.triggerer_job_runner import TriggererJobRunner
                  except ImportError:
                      # `TriggererJob` is wrapped by `TriggererJobRunner` since airflow 2.6.0
                      from airflow.jobs.triggerer_job import TriggererJob as TriggererJobRunner

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(Job) \
                          .filter_by(job_type=TriggererJobRunner.job_type) \
                          .filter_by(hostname=hostname) \
                          .order_by(Job.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
---
# Source: earnest-airflow2/charts/airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1857c3408fef54e4a0fc8729a21b39d9b02fac0f28cc813f79ccb68fd3d1d3b2
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: c28accb713e87c4523f7990f00d115accea45a6c1e7bc8e51c01d684999e8909
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: release-name
      securityContext:
        fsGroup: 0
      initContainers:        
        - name: check-db  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:         
        - name: wait-for-db-migrations  
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:    
            - secretRef:
                name: release-name-config-envs
          env:    
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:    
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:    
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
      containers:
        - name: airflow-web          
          image: airflow2-earnest:2.6.3.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 2.5Gi
            requests:
              cpu: 250m
              memory: 2.5Gi
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:            
            - secretRef:
                name: release-name-config-envs
          env:            
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
          command:            
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          volumeMounts:            
            - name: dags-data
              mountPath: /opt/airflow/dags
              subPath: 
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath: 
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
      volumes:        
        - name: dags-data
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-data
          persistentVolumeClaim:
            claimName: release-name-logs
        - name: webserver-config
          secret:
            secretName: release-name-webserver-config
            defaultMode: 0644
---
# Source: earnest-airflow2/charts/airflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "release-name"
    heritage: "Helm"
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "release-name"
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "release-name"
        heritage: "Helm"
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']
        
      containers:
        - name: release-name-postgresql
          image: ghcr.io/airflow-helm/postgresql-bitnami:11.16-patch.0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "airflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: earnest-airflow2/charts/airflow/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.5.7
        release: release-name
        role: master
      annotations:
        checksum/health: 1957420aac30345fc7ab07ecf223f18319089ca45ac2ad5dabb6eaaac6ae1e50
        checksum/configmap: 2a432f7bc5fe401bc1d5db0ac89f6c7d3f843b3aa24d5c9540b55b2fecb40987
        checksum/secret: e09a1f5300436c929c9361996872076a54b41a357d3446c44a2218f3144be6f4
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
      - name: release-name-redis
        image: "docker.io/bitnami/redis:5.0.14-debian-10-r173"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-redis
              key: redis-password
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 5
        resources:
          {}
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      volumes:
      - name: health
        configMap:
          name: release-name-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: release-name-redis
      - name: "redis-data"
        emptyDir: {}
      - name: redis-tmp-conf
        emptyDir: {}
  updateStrategy:
    type: RollingUpdate
---
# Source: earnest-airflow2/charts/airflow/templates/webserver/webserver-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-web
  annotations:
    ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
    ingress.kubernetes.io/auth-type: forward
    ingress.kubernetes.io/auth-url: http://traefik-forward-auth.kube-system.svc.cluster.local
    kubernetes.io/ingress.class: traefik
  labels:
    app: airflow
    component: web
    chart: airflow-8.7.1
    release: release-name
    heritage: Helm
spec:
  rules:
    - host: airflow2.k8s.data-org.development.earnest.com
      http:
        paths:
          - path: 
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-web
                port:
                  name: web
