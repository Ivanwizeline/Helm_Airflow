---
# Source: airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
---
# Source: airflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YWlyZmxvdw=="
---
# Source: airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-config-envs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "ZGF0YS1haXJmbG93LTItcGdib3VuY2VyLmFpcmZsb3ctMi5zdmMuY2x1c3Rlci5sb2NhbA=="
  DATABASE_PORT: "NjQzMg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvdw=="

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in `psql` cli format
  DATABASE_PSQL_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig=="

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3MvcmVwby9kYWdz"
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "NjA="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "ZWFybmVzdC9haXJmbG93XzI="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "Mi4yLjUuMy0yNGVkOWE0LWxpbnV4LWFtZDY0"
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__ENABLE_XCOM_PICKLING": "dHJ1ZQ=="
  "AIRFLOW__CORE__ENCRYPT_S3_LOGS": "ZmFsc2U="
  "AIRFLOW__CORE__LOAD_EXAMPLES": "RmFsc2U="
  "AIRFLOW__CORE__LOGGING_LEVEL": "SU5GTw=="
  "AIRFLOW__CORE__PARALLELISM": "MzI="
  "AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER": "czM6Ly9lYXJuZXN0LWRldmVsb3BtZW50LWRhdGEtaW5mcmFzdHJ1Y3R1cmUtYWlyZmxvdy1sb2dzL2FpcmZsb3cyL2xvZ3M="
  "AIRFLOW__CORE__REMOTE_LOGGING": "dHJ1ZQ=="
  "AIRFLOW__CORE__REMOTE_LOG_CONN_ID": "YWlyZmxvd19hd3NfbG9nZ2luZw=="
  "AIRFLOW__KUBERNETES_SECRETS__VAULT_TOKEN": "YWlyZmxvdy1kYWdzLXNlY3JldHM9dmF1bHRfdG9rZW4="
  "AIRFLOW__KUBERNETES__NAMESPACE": "YWlyZmxvdy0y"
  "AIRFLOW__KUBERNETES__RUN_AS_USER": "MTAwMA=="
  "AIRFLOW__SCHEDULER__RUN_DURATION": "NDMyMDA="
  "AIRFLOW__WEBSERVER__BASE_URL": "aHR0cHM6Ly97eyAuRW52aXJvbm1lbnQuVmFsdWVzLkFJUkZMT1dfV0VCX0hPU1QgfX0="
  "AIRFLOW__WEBSERVER__EXPOSE_CONFIG": "RmFsc2U="
  "AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT": "MzYw"
  "AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT": "MzYw"
  "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  "AWS_SESSION_TOKEN": "SE9MQUxBTEFMQQ=="
  "BOOTSTRAP_ADMIN_USER": "dHJ1ZQ=="
  "ENVIRONMENT": "bG9jYWw="
  "GENERATION": "MQ=="
  "NEW_RELIC_ENVIRONMENT": ""
---
# Source: airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-webserver-config
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdGhlIFNRTEFsY2hlbXkgY29ubmVjdGlvbiBzdHJpbmcKU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkgPSBjb25mLmdldCgnY29yZScsICdTUUxfQUxDSEVNWV9DT05OJykKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREI="
---
# Source: airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygwKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer-certs
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  client.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdjhqRklORklhbytDYmtwcGNkMDNpZ1NOdXY3QVdLRjBSNE9XU2hrZi90UTI3azlZCmw4VmVCMURPbE1MdlFMYWJ2M3VzY3phUUV2MkM3WVNRcEV4azVCblhNOHo3R3pjbW1ocHFJVm5zSWUrZE5QWjEKa2FGbHdtelEwbnpvVGQrc1RNdFhWTXZac1JwdnZqQU9RMXowbUF6aytxakc3T0xiVE9vVFBuSmV3VU9obm15cQpTTHNOMFYyc1ZHWVQ1ZjNiS05EM0tqR0VoQ0VBdXFtcmswdnU5dUxTSHFRa29UeGRIM0NQNTNnK1ppcDJMTmJjCjdUcUg3a1NEYXl2VDdpS0I4R2RHeTZiTENpSjNscDA5djBiWGRlUzUwOGVXV0lyajQxZjFPOU9lemZubFVsRisKU3BsMXU1VmNVUkV3QWUycEJReXl4V0lNVXk1eVRIMTFZaUMzL3dJREFRQUJBb0lCQUVndjdlTTRZeVdZOXVORQpwd1B3M0dMYTYrNGl6WXVPMmhIQStlVFNLRFRtOC9ZbmI1VlErTitRRHZIM25jNmg3V1haeTBOaW1rQkxvK2g3CktXWnVTdHVBem52MC85OXlsdGtTY0RnMWZLZ1paUGIyZmJKZktjcFE0eGtYWXVsTTg3SEVLQThHMjkzSnNaM0kKd05XaU8zNnYrOUJOanZMRFFRQm1hdS9xWkxnaGNTVnhJYmdtbFZDYnMzNHFTcVdPd2VkcDQrNDdZSVFtdFBCRgo0c3hsaXZhWk5pQXV0WU1JMGxNdXF3ZkxYd050MzBlZXpDblZ1S2RtU2ROaFZiZmJmaEN6bHdSMmFsNTdIM1NICllYcW1iMTlsYmJnTG12VmtJU1IwWU91U3UzcWNGejVQcDQ2U1JxNjNNTVF3a2lmOUg3aTVvd3lsZWNodVF0ZGEKWWIwZjlHRUNnWUVBeUkyU0pZV05BeDJKL2RSaVN6WEZ5a3NYNjRGMW5uenBzNE52T2xOb3oycCtSZnI3Z1l2TwpvUGRLYXR4WkRuSFFQMGhwV2c5V0N0RlYzWWJ1S3pUb2J5MUtZWkRUUitIRU5Ya2srdUxUaVpQYm1LbmJqVVRiCk5zc2RUcmhyOURnNkEyN3FsV205cGlhTEQyTG9aQnEreGhQWVBXa3M0bUpUakdSa2tFU3c2VlVDZ1lFQTlNNlQKOVVsQ0U1Z2cyWnhqMVNTdlgvYk1Pd1d2VldobTUxdVFGdnI1bG1US0NQTC90Y21GbHdFVG01TDJtZ2M3R0NpUgpWbkZ5RHM1U0kwZWdwdTBhZHBoQmpZUVVLRkpjczhiT2F2Q2dNc3h4QlV0ZHlXTmx0K0dxNGZVN2doajRtK3E0CksxczIvNFIxTW9rYlo5Qkd3aXV1SVZ2MEFlZDVHdVpYVVF5bURBTUNnWUJmeTMrcmZJZEduYTEwR1NaNlZrMEwKdTZMSlV5VWpkdmNLVUJXby9uNXAxS3hNTVA1QmVzNVFCTTcvREJGZDNPOWp5dXJIb2R1dmZ4NU1tazdaUklSaAoxbmhZOGh4NWtWVnZWVlpjb0V2Nnd5MTVWbWtRcVhzc1NRak91VGlYaHVQdkQrUHRTbnpVQ0VVVUxHSmtyb0hCCmkya1dyRTVNTkR0RUxBLzgrVktub1FLQmdHNGpacVBMWXNRSUJIZURDZE5DSHZqUXcwK21uaHlSelFJM3lwcmMKTFdCQlZqZ3lnMk1aR0ZZNHNNYWtsdmZ6V3QzaW1vakduMmNUNGhablNscnZmNkZ0bk1oN2JNbzdTK1BDQk9wTgorZlVBejdSdkZQSGZHMHRnWnc0ajA3TVRZdjVhMnFMKzliNTlySENoQ01ockJ2cWl4a1BSNS9UWFhFQUM4N1BPCk9nSmJBb0dBRUUxTVNjMHU4ZjZmaFovcWFGd1JtTWF2MG94T1FtYzhNV1phaDd5Z0NHZUNFdDZveUYyVmdPb2gKVTFsRkZId2J4SFA4eGRXWUZaa1dLT0Zkd3JUM2dqbTMvMHpBVE13TFVJTkZTUk8zQUZ4Rk1GV2dLa004SlYvYwpRdUNyLzdnU2laandzZjhkOWxUSDJLcWQ3YmdaZzM1bWhmQzZWa2Jlb3E4NDNWdkZEV1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  client.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4VENDQWRtZ0F3SUJBZ0lRZnN4d2NXWU11a0pkaWNjUzFWazlmVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2YzNRd0hoY05Nakl3TnpBMU1UZzFNalE0V2hjTk1qTXdOekExTVRnMQpNalE0V2pBVU1SSXdFQVlEVlFRREV3bHNiMk5oYkdodmMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy95TVVnMFVocWo0SnVTbWx4M1RlS0JJMjYvc0JZb1hSSGc1WktHUi8rMURidVQxaVgKeFY0SFVNNlV3dTlBdHB1L2U2eHpOcEFTL1lMdGhKQ2tUR1RrR2RjenpQc2JOeWFhR21vaFdld2g3NTAwOW5XUgpvV1hDYk5EU2ZPaE4zNnhNeTFkVXk5bXhHbSsrTUE1RFhQU1lET1Q2cU1iczR0dE02aE0rY2w3QlE2R2ViS3BJCnV3M1JYYXhVWmhQbC9kc28wUGNxTVlTRUlRQzZxYXVUUys3MjR0SWVwQ1NoUEYwZmNJL25lRDVtS25ZczF0enQKT29mdVJJTnJLOVB1SW9Id1owYkxwc3NLSW5lV25UMi9SdGQxNUxuVHg1WllpdVBqVi9VNzA1N04rZVZTVVg1SwptWFc3bFZ4UkVUQUI3YWtGRExMRllneFRMbkpNZlhWaUlMZi9BZ01CQUFHalB6QTlNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUdCU0ZkdGZ5THhIQlF4dGovL0RTQTVwUS9PMkFrT0ZNT3g1TApOelBiamk3R1ZPZ1hhVnZKZEc2V2QzQlYrT2tWK293T1Y3SjJaa2tOLzg2Ymtwa2F1eTIyV0dBNkpQTDVBVVZpCmdzbVJuZUtXcFRVcEFlWDJHcUdaWXpmMlRzRkZJT1ZvcCtrcEVnM0JjenZWaWNuZDA5ak0ybFdlZTcxTm9Db0wKdkFrcFM1ZEt1R3JSTXplKzRxUXZrSWo5bFVMbW1iSWhjMndGVm50MEtrNGlOY3k5QlYyS01NR1NuWVY3U3NhLwpZMGpIL280U2FTUDkvbGNNYmE1MENTUFcreVhjMjgwMkJyNXBOMTJTbFhjMm55eXlLQXl0NVNLWk9SZ3V5Vnd5CmxlWDhRbTBqMzY3dG9EcVg5YVgvVCt1a09relczZ1ZrOTYySkJ3cG4wY0FUR3FpV1lnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pgbouncer.ini: "CltkYXRhYmFzZXNdCiogPSBob3N0PWRhdGEtYWlyZmxvdy0yLXBvc3RncmVzcWwuYWlyZmxvdy0yLnN2Yy5jbHVzdGVyLmxvY2FsIHBvcnQ9NTQzMgoKW3BnYm91bmNlcl0KcG9vbF9tb2RlID0gdHJhbnNhY3Rpb24KbWF4X2NsaWVudF9jb25uID0gMTAwMApkZWZhdWx0X3Bvb2xfc2l6ZSA9ICAyMAppZ25vcmVfc3RhcnR1cF9wYXJhbWV0ZXJzID0gZXh0cmFfZmxvYXRfZGlnaXRzCgpsaXN0ZW5fcG9ydCA9IDY0MzIKbGlzdGVuX2FkZHIgPSAqCgphdXRoX3R5cGUgPSBtZDUKYXV0aF9maWxlID0gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAoKbG9nX2Rpc2Nvbm5lY3Rpb25zID0gMApsb2dfY29ubmVjdGlvbnMgPSAwCgojIGxvY2tzIHdpbGwgbmV2ZXIgYmUgcmVsZWFzZWQgd2hlbiBgcG9vbF9tb2RlPXRyYW5zYWN0aW9uYCAoYWlyZmxvdyBpbml0ZGIvdXBncmFkZWRiIHNjcmlwdHMgY3JlYXRlIGxvY2tzKQpzZXJ2ZXJfcmVzZXRfcXVlcnkgPSBTRUxFQ1QgcGdfYWR2aXNvcnlfdW5sb2NrX2FsbCgpCnNlcnZlcl9yZXNldF9xdWVyeV9hbHdheXMgPSAxCgojIyBDTElFTlQgVExTIFNFVFRJTkdTICMjCmNsaWVudF90bHNfc3NsbW9kZSA9IHByZWZlcgpjbGllbnRfdGxzX2NpcGhlcnMgPSBub3JtYWwKY2xpZW50X3Rsc19rZXlfZmlsZSA9IC9ob21lL3BnYm91bmNlci9jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2NlcnRzL2NsaWVudC5jcnQKCiMjIFNFUlZFUiBUTFMgU0VUVElOR1MgIyMKc2VydmVyX3Rsc19zc2xtb2RlID0gcHJlZmVyCnNlcnZlcl90bHNfY2lwaGVycyA9IG5vcm1hbA=="
  gen_auth_file.sh: "CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI="
---
# Source: airflow/templates/sync/sync-connections-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_connections.py: ""
---
# Source: airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-airflow-2-pod-template
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pod_template.yaml: |-

    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: earnest-dockerhub
      serviceAccountName: data-airflow-2
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      containers:
        - name: base
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports: []
          command: []
          args: []
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
---
# Source: airflow/templates/pvc-logs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: data-airflow-2-logs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "hostpath"
---
# Source: airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: data-airflow-2
subjects:
- kind: ServiceAccount
  name: data-airflow-2
  namespace: airflow-2
---
# Source: airflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
---
# Source: airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
    role: master
---
# Source: airflow/templates/pgbouncer/pgbouncer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: data-airflow-2
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
# Source: airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: data-airflow-2
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 5f00610c570937a76488380602536f1a0487c0dea26e2a421a63560257180aae
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-db-migrations
---
# Source: airflow/templates/pgbouncer/pgbouncer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      ## multiple pgbouncer pods can safely run concurrently
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-pgbouncer: 2ea543dc7bbf0f88674d0a8dd877530586f79bb5f66d195d53a1411991db5c3c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: data-airflow-2
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.17.0-patch.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - "/usr/bin/dumb-init"
            ## rewrite SIGTERM as SIGINT, so pgbouncer does a safe shutdown
            - "--rewrite=15:2"
            - "--"
          args:
            - "/bin/sh"
            - "-c"
            ## we generate users.txt on startup, because DATABASE_PASSWORD is defined from a Secret,
            ## and we want to pickup the new values on container restart (possibly due to livenessProbe failure)
            - |-
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-c"
                ## this check is intended to fail when the DATABASE_PASSWORD secret is updated,
                ## which would cause `gen_auth_file.sh` to run again on container start
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: data-airflow-2-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 0755
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
              ## CLIENT TLS FILES (CHART GENERATED)
              - secret:
                  name: data-airflow-2-pgbouncer-certs
                  items:
                    - key: client.key
                      path: client.key
                    - key: client.crt
                      path: client.crt
---
# Source: airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 487e7e9ca9e1add3942addfde73929f42df9124bab5303dc44537da3c5e51f8c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-scheduler
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: pod-template
          configMap:
            name: data-airflow-2-pod-template
---
# Source: airflow/templates/sync/sync-connections-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-connections
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-connections-script: f12784c584c46291a60b69a0126fbca59434f40897dd01797310ed33354785d9
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-connections
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: sync-airflow-connections
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_connections.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
            - name: templates
              mountPath: "/mnt/templates"
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-connections
        - name: templates
          projected:
            sources:
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_ACCESS_KEY_ID"
                      path: "ACCESS_KEY_ID"
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_SECRET_ACCESS_KEY"
                      path: "SECRET_ACCESS_KEY"
---
# Source: airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: f62d93f9c806136eb362f6bba08a7ae7cdc43ff793e3bc6288804887a9bd1b85
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: sync-airflow-users
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-users
---
# Source: airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-triggerer
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
---
# Source: airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: bc31b4b1b1616937a8fe221db9173d364cf185517f3a4ef95dd256e0de8c10f5
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: a985f48c5057a86f1ac35b3001a9131d46ac8de432ebd0556b98492938cc76f6
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-web
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 2.5Gi
            requests:
              cpu: 250m
              memory: 2.5Gi
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: webserver-config
          secret:
            secretName: data-airflow-2-webserver-config
            defaultMode: 0644
---
# Source: airflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  serviceName: data-airflow-2-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "data-airflow-2"
      role: master
  template:
    metadata:
      name: data-airflow-2-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "data-airflow-2"
        heritage: "Helm"
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']

      containers:
        - name: data-airflow-2-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "airflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: airflow/templates/webserver/webserver-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-airflow-2-web
  annotations:
    ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
    ingress.kubernetes.io/auth-type: forward
    ingress.kubernetes.io/auth-url: http://traefik-forward-auth.kube-system.svc.cluster.local
    kubernetes.io/ingress.class: traefik
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  rules:
    - host: airflow2.k8s.data-org.staging.earnest.com
      http:
        paths:
          - path:
            pathType: ImplementationSpecific
            backend:
              service:
                name: data-airflow-2-web
                port:
                  name: web
---
# Source: airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
---
# Source: airflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YWlyZmxvdw=="
---
# Source: airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-config-envs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "ZGF0YS1haXJmbG93LTItcGdib3VuY2VyLmFpcmZsb3ctMi5zdmMuY2x1c3Rlci5sb2NhbA=="
  DATABASE_PORT: "NjQzMg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvdw=="

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in `psql` cli format
  DATABASE_PSQL_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig=="

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3MvcmVwby9kYWdz"
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "NjA="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "ZWFybmVzdC9haXJmbG93XzI="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "Mi4yLjUuMy0yNGVkOWE0LWxpbnV4LWFtZDY0"
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__ENABLE_XCOM_PICKLING": "dHJ1ZQ=="
  "AIRFLOW__CORE__ENCRYPT_S3_LOGS": "ZmFsc2U="
  "AIRFLOW__CORE__LOAD_EXAMPLES": "RmFsc2U="
  "AIRFLOW__CORE__LOGGING_LEVEL": "SU5GTw=="
  "AIRFLOW__CORE__PARALLELISM": "MzI="
  "AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER": "czM6Ly9lYXJuZXN0LWRldmVsb3BtZW50LWRhdGEtaW5mcmFzdHJ1Y3R1cmUtYWlyZmxvdy1sb2dzL2FpcmZsb3cyL2xvZ3M="
  "AIRFLOW__CORE__REMOTE_LOGGING": "dHJ1ZQ=="
  "AIRFLOW__CORE__REMOTE_LOG_CONN_ID": "YWlyZmxvd19hd3NfbG9nZ2luZw=="
  "AIRFLOW__KUBERNETES_SECRETS__VAULT_TOKEN": "YWlyZmxvdy1kYWdzLXNlY3JldHM9dmF1bHRfdG9rZW4="
  "AIRFLOW__KUBERNETES__NAMESPACE": "YWlyZmxvdy0y"
  "AIRFLOW__KUBERNETES__RUN_AS_USER": "MTAwMA=="
  "AIRFLOW__SCHEDULER__RUN_DURATION": "NDMyMDA="
  "AIRFLOW__WEBSERVER__BASE_URL": "aHR0cHM6Ly97eyAuRW52aXJvbm1lbnQuVmFsdWVzLkFJUkZMT1dfV0VCX0hPU1QgfX0="
  "AIRFLOW__WEBSERVER__EXPOSE_CONFIG": "RmFsc2U="
  "AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT": "MzYw"
  "AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT": "MzYw"
  "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  "AWS_SESSION_TOKEN": ""
  "BOOTSTRAP_ADMIN_USER": "dHJ1ZQ=="
  "ENVIRONMENT": "bG9jYWw="
  "GENERATION": "MQ=="
  "NEW_RELIC_ENVIRONMENT": ""
---
# Source: airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-webserver-config
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdGhlIFNRTEFsY2hlbXkgY29ubmVjdGlvbiBzdHJpbmcKU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkgPSBjb25mLmdldCgnY29yZScsICdTUUxfQUxDSEVNWV9DT05OJykKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREI="
---
# Source: airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygwKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer-certs
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  client.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBM0FVa2h4bFZWSndMYms1cis0UEovcU1OSDU4NlAwWE1OZ1hJSXMxNG1Wa0hka1g4CjdYVWFxc2xzVXFxSEFVRDc4QmhweHY4Ni9Ob0RnVmVEYW0veksydXViVkhRSVlmUnQ5RDByYngyVndoMHJ1WGYKaUsrYXllWDZHNEtJYXBQOTdEQUZ5V0E0WjY5SmVOcmR5REhXcnlndCtpanVzaEdBRWg5bU0vc0JlblNUK1FkSApwRUsyMlpYaXcvZWpMZmYvTWRZWW1TMExTdHBSOG00NmtYTWdDejNDQjFwbVdKdjl1VFRidWJETFVzNWtsRTUzCkRyd3V5ZmV4RGthTFlvUWwrWEE1N1ZKWVpOUjhBbkhSaDBlSU0xdmZQNWF0ZWdPNDduNDdvMWo2NEFWMzA4anQKZmY1anNBZFZYY2N6UGxaSXoyU294Rk5RWGFmZDBiV3dOaHMwUndJREFRQUJBb0lCQVFDY015NTJsejZrUGRCRAp0SHNtNmE0N0VBamVIVTNkNDdDUjNkTHpHa3AzRytTWFRDSy9kamJEYnhKdk1jOTh6V1RQVkpXc0NFRVpoN0diClhzVFdpTG5yWnB4RDBpUmYyYXZDd3g4aVJMMERGdWEzMEV5OUhtWlcxZVdWS0R1dTVuZ0wrUi95a2xRWkVER3EKRWtBSHc1STFjZUlLU29zRGNqY3BKbytKY2JiZjlwaWxUSlNwbFlIaWFqdkJOeDdsSGJrcm9rZWNlZnRzcGdJRgpUdlgzZlFUS2oydG9YV01qWnBOM09WdWRVOEN6bWRDWmIrUGpLbi9sWHBzYS9qcmJHZnJlOVcrUDFldmF4dGVKClhzOVRQSW5xdkNySW1sbjM2ODBwMVBSek40OVI5YlBjLzI3Z0NsWUpBV1k5Qm4yYXJZY0d1L0dNUHVGV2l5SUkKWDJLVWNkeXhBb0dCQU91YzdZdUU1V3owbGxQMGJEZ3JqYnMralk3Uk02cmE2WFozbDFScmhuQm9DemczUFIrYQpPV29LSjYxNzZ6eWl2VWQvek4zRk55VklycmJIT3I0cW94MjBUcFcxVVVPZmFhOVcrSkt4ME1hMkxKZHg1amNkCmplOGNSK213M08xTnR0MDJwaXhXRU5Jbnd1SlBrYWZIWnVDZXozQmhRVUlNUXd0WTh2YlV1NXNmQW9HQkFPOE8KME0yNzdaU3VQQUpuVVVVMVNPMFhSckdSbXBNZFNPSVFjRGltb0V3NTlMNVdoR3hIM3FFN05Ec0NFaTQ3aWU5VgpaWEtsSW1Zd293ZDhKcnhUSTBNZ2tWYWhpZlhxcFlpWEZLUEZaMTJJN1FhZTBpdkxTclN3ZEtXelVjbXRYMFZpCi9MRHRiQkdYL0JiQ2Mzd2hDNSt4d0pUV3orT1VoZnNLd2p3VjYyblpBb0dCQUpNYTJaMWdqalhteCswSEVJSkoKZnlaSE9lN1BZeWpyb1JRY090bTBnSzJ4NkQ5akRjQ3JjK2xuQ2JyaFFkQUw4NDJ1bDJSbmU3VEZtbi80Q0E4dgpZOFJxRFI2ZnBHdEtIcHdnK3ZYc0cyUFYzaVY0TWJwN3MyQjFFZGt3V2QrM3c5SitDbVpvSGZ4NFlzOFZ5dVVzCk5HbE4va28yRHA2RU5WL2lXMkFORmswVkFvR0JBSlVaVFh2enFTTmhaRVl2Z0UzRkJSM3l0WUhNaVhjVi9iNFoKZUpTc3dDK3F1ZzM0MGhEaTVtVHpFd2wycWpZeHBqOGlxT3BQT2x3NEc0WndsWXhCNGkxYzQ2ai9pWmRhYVRIKwo0TDJnUW03aEZzeFpSRVpTUGQ3aWEyNXBvQ3BFT3JhQkhZK1FGU1lJQUErRjZoZFNXUGlhR2IzN0dLQWRvMDdICkVBdi9zOXRKQW9HQU8rZlFZQ1hFdlMzSUYzMGVJZmVlMG51NzdMbWF3UElYa21BRFpQVnFXVE1adVVaZlNReUoKNVNJaUpOeVZlRjFZOXVWL0JmUkg0dm1kQmhVU0s0VkcySWw3RVZLWjBKazNkc2FPcjlYTGZ5Vm5pbWZCNldFQwo4S1M1YUg1cXJCSnl4M3puLzAvdjBmQklBL3Nqbk00MzlGa0FNQ0ZzNkJ6MjBpb3BmNmpKRVJFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  client.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4VENDQWRtZ0F3SUJBZ0lRSDV2cGJmVXFCb3RzY1RkWTVBZzhkVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2YzNRd0hoY05Nakl3TnpBMU1Ua3hNalEzV2hjTk1qTXdOekExTVRreApNalEzV2pBVU1SSXdFQVlEVlFRREV3bHNiMk5oYkdodmMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGNCU1NIR1ZWVW5BdHVUbXY3ZzhuK293MGZuem8vUmN3MkJjZ2l6WGlaV1FkMlJmenQKZFJxcXlXeFNxb2NCUVB2d0dHbkcvenI4MmdPQlY0TnFiL01yYTY1dFVkQWhoOUczMFBTdHZIWlhDSFN1NWQrSQpyNXJKNWZvYmdvaHFrLzNzTUFYSllEaG5yMGw0MnQzSU1kYXZLQzM2S082eUVZQVNIMll6K3dGNmRKUDVCMGVrClFyYlpsZUxEOTZNdDkvOHgxaGlaTFF0SzJsSHlianFSY3lBTFBjSUhXbVpZbS8yNU5OdTVzTXRTem1TVVRuY08KdkM3Sjk3RU9Sb3RpaENYNWNEbnRVbGhrMUh3Q2NkR0hSNGd6Vzk4L2xxMTZBN2p1Zmp1aldQcmdCWGZUeU8xOQovbU93QjFWZHh6TStWa2pQWktqRVUxQmRwOTNSdGJBMkd6UkhBZ01CQUFHalB6QTlNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQU9vK2Q0UlAybXg0YXU5QnZRSU9kekNIU2NUSTM4dE54NmcxcQpkMXpzRjlJcFN2MFhreW80citaZDFPMktaak5kMkFnK1RmSXVPSFBNYUhGYTd3ZjlXTG9ydEg0VkcyRDE1MFMwCkRhUE5LQklzcGsvNDNHc1F4cEYzMnlaTW0wQ202QWdIZENkNXdjd3ZuVXJWditnOHI5SnJQSUh3TWp6ckVPZkgKeG81QkdCNU1IallMamZmOVhDb1dQZnBjZjdYUUFCSE1FQkNMazlFTHgrU3JvdDFsVmQ2SitkdVgrNzNKd0ZFeAozSlc1UFh6ZW5ZZm1nOVY4RTlZTmlYRWRTSGY3d2pQRVk4Y3FoQ0djMEsrb09tVnhReVRwcDQzVEJLOThwcFJHCnF3WG5BY2REVGlpY2U4bDJqOUhvYWIwbjkzYmxhamNVVWtDamJ1U0pWaThUMHA2eklnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pgbouncer.ini: "CltkYXRhYmFzZXNdCiogPSBob3N0PWRhdGEtYWlyZmxvdy0yLXBvc3RncmVzcWwuYWlyZmxvdy0yLnN2Yy5jbHVzdGVyLmxvY2FsIHBvcnQ9NTQzMgoKW3BnYm91bmNlcl0KcG9vbF9tb2RlID0gdHJhbnNhY3Rpb24KbWF4X2NsaWVudF9jb25uID0gMTAwMApkZWZhdWx0X3Bvb2xfc2l6ZSA9ICAyMAppZ25vcmVfc3RhcnR1cF9wYXJhbWV0ZXJzID0gZXh0cmFfZmxvYXRfZGlnaXRzCgpsaXN0ZW5fcG9ydCA9IDY0MzIKbGlzdGVuX2FkZHIgPSAqCgphdXRoX3R5cGUgPSBtZDUKYXV0aF9maWxlID0gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAoKbG9nX2Rpc2Nvbm5lY3Rpb25zID0gMApsb2dfY29ubmVjdGlvbnMgPSAwCgojIGxvY2tzIHdpbGwgbmV2ZXIgYmUgcmVsZWFzZWQgd2hlbiBgcG9vbF9tb2RlPXRyYW5zYWN0aW9uYCAoYWlyZmxvdyBpbml0ZGIvdXBncmFkZWRiIHNjcmlwdHMgY3JlYXRlIGxvY2tzKQpzZXJ2ZXJfcmVzZXRfcXVlcnkgPSBTRUxFQ1QgcGdfYWR2aXNvcnlfdW5sb2NrX2FsbCgpCnNlcnZlcl9yZXNldF9xdWVyeV9hbHdheXMgPSAxCgojIyBDTElFTlQgVExTIFNFVFRJTkdTICMjCmNsaWVudF90bHNfc3NsbW9kZSA9IHByZWZlcgpjbGllbnRfdGxzX2NpcGhlcnMgPSBub3JtYWwKY2xpZW50X3Rsc19rZXlfZmlsZSA9IC9ob21lL3BnYm91bmNlci9jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2NlcnRzL2NsaWVudC5jcnQKCiMjIFNFUlZFUiBUTFMgU0VUVElOR1MgIyMKc2VydmVyX3Rsc19zc2xtb2RlID0gcHJlZmVyCnNlcnZlcl90bHNfY2lwaGVycyA9IG5vcm1hbA=="
  gen_auth_file.sh: "CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI="
---
# Source: airflow/templates/sync/sync-connections-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_connections.py: ""
---
# Source: airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-airflow-2-pod-template
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pod_template.yaml: |-

    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: earnest-dockerhub
      serviceAccountName: data-airflow-2
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      containers:
        - name: base
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports: []
          command: []
          args: []
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
---
# Source: airflow/templates/pvc-logs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: data-airflow-2-logs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "hostpath"
---
# Source: airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: data-airflow-2
subjects:
- kind: ServiceAccount
  name: data-airflow-2
  namespace: airflow-2
---
# Source: airflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
---
# Source: airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
    role: master
---
# Source: airflow/templates/pgbouncer/pgbouncer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: data-airflow-2
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
# Source: airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: data-airflow-2
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 5f00610c570937a76488380602536f1a0487c0dea26e2a421a63560257180aae
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-db-migrations
---
# Source: airflow/templates/pgbouncer/pgbouncer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      ## multiple pgbouncer pods can safely run concurrently
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-pgbouncer: 2ea543dc7bbf0f88674d0a8dd877530586f79bb5f66d195d53a1411991db5c3c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: data-airflow-2
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.17.0-patch.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - "/usr/bin/dumb-init"
            ## rewrite SIGTERM as SIGINT, so pgbouncer does a safe shutdown
            - "--rewrite=15:2"
            - "--"
          args:
            - "/bin/sh"
            - "-c"
            ## we generate users.txt on startup, because DATABASE_PASSWORD is defined from a Secret,
            ## and we want to pickup the new values on container restart (possibly due to livenessProbe failure)
            - |-
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-c"
                ## this check is intended to fail when the DATABASE_PASSWORD secret is updated,
                ## which would cause `gen_auth_file.sh` to run again on container start
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: data-airflow-2-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 0755
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
              ## CLIENT TLS FILES (CHART GENERATED)
              - secret:
                  name: data-airflow-2-pgbouncer-certs
                  items:
                    - key: client.key
                      path: client.key
                    - key: client.crt
                      path: client.crt
---
# Source: airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 487e7e9ca9e1add3942addfde73929f42df9124bab5303dc44537da3c5e51f8c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-scheduler
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: pod-template
          configMap:
            name: data-airflow-2-pod-template
---
# Source: airflow/templates/sync/sync-connections-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-connections
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-connections-script: f12784c584c46291a60b69a0126fbca59434f40897dd01797310ed33354785d9
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-connections
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: sync-airflow-connections
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_connections.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
            - name: templates
              mountPath: "/mnt/templates"
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-connections
        - name: templates
          projected:
            sources:
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_ACCESS_KEY_ID"
                      path: "ACCESS_KEY_ID"
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_SECRET_ACCESS_KEY"
                      path: "SECRET_ACCESS_KEY"
---
# Source: airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: f62d93f9c806136eb362f6bba08a7ae7cdc43ff793e3bc6288804887a9bd1b85
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: sync-airflow-users
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-users
---
# Source: airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-triggerer
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
---
# Source: airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 6f74ddaea36a863976a3340bc681dfa5bac989d66045cc4a69fa6172d9bcca3b
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: a985f48c5057a86f1ac35b3001a9131d46ac8de432ebd0556b98492938cc76f6
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
      containers:
        - name: airflow-web
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 2.5Gi
            requests:
              cpu: 250m
              memory: 2.5Gi
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
              subPath:
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Ipachon/migration/Airflow_2_base_branch"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          persistentVolumeClaim:
            claimName: data-airflow-2-logs
        - name: webserver-config
          secret:
            secretName: data-airflow-2-webserver-config
            defaultMode: 0644
---
# Source: airflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  serviceName: data-airflow-2-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "data-airflow-2"
      role: master
  template:
    metadata:
      name: data-airflow-2-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "data-airflow-2"
        heritage: "Helm"
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']

      containers:
        - name: data-airflow-2-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "airflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: airflow/templates/webserver/webserver-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-airflow-2-web
  annotations:
    ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
    ingress.kubernetes.io/auth-type: forward
    ingress.kubernetes.io/auth-url: http://traefik-forward-auth.kube-system.svc.cluster.local
    kubernetes.io/ingress.class: traefik
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  rules:
    - host: airflow2.k8s.data-org.staging.earnest.com
      http:
        paths:
          - path:
            pathType: ImplementationSpecific
            backend:
              service:
                name: data-airflow-2-web
                port:
                  name: web
---
# Source: airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
---
# Source: airflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YWlyZmxvdw=="
---
# Source: airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-config-envs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "ZGF0YS1haXJmbG93LTItcGdib3VuY2VyLmFpcmZsb3ctMi5zdmMuY2x1c3Rlci5sb2NhbA=="
  DATABASE_PORT: "NjQzMg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvdw=="

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in `psql` cli format
  DATABASE_PSQL_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig=="

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3MvcmVwby9kYWdz"
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "NjA="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "ZWFybmVzdC9haXJmbG93XzI="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "Mi4yLjUuMy0yNGVkOWE0LWxpbnV4LWFtZDY0"
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__ENABLE_XCOM_PICKLING": "dHJ1ZQ=="
  "AIRFLOW__CORE__ENCRYPT_S3_LOGS": "ZmFsc2U="
  "AIRFLOW__CORE__LOAD_EXAMPLES": "RmFsc2U="
  "AIRFLOW__CORE__LOGGING_LEVEL": "SU5GTw=="
  "AIRFLOW__CORE__PARALLELISM": "MTAw"
  "AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER": "czM6Ly9lYXJuZXN0LXN0YWdpbmctZGF0YS1pbmZyYXN0cnVjdHVyZS1haXJmbG93LWxvZ3MvYWlyZmxvdzIvbG9ncw=="
  "AIRFLOW__CORE__REMOTE_LOGGING": "dHJ1ZQ=="
  "AIRFLOW__CORE__REMOTE_LOG_CONN_ID": "YWlyZmxvd19hd3NfbG9nZ2luZw=="
  "AIRFLOW__KUBERNETES_SECRETS__VAULT_TOKEN": "YWlyZmxvdy1kYWdzLXNlY3JldHM9dmF1bHRfdG9rZW4="
  "AIRFLOW__KUBERNETES__NAMESPACE": "YWlyZmxvdy0y"
  "AIRFLOW__KUBERNETES__RUN_AS_USER": "MTAwMA=="
  "AIRFLOW__OIDC__OVERWRITE_REDIRECT_URI": "aHR0cHM6Ly9haXJmbG93Mi5zdGFnaW5nLmVhcm5lc3QuY29tL2F1dGhvcml6YXRpb24tY29kZS9jYWxsYmFjaw=="
  "AIRFLOW__OIDC__VALID_ISSUERS": "e3sgLkVudmlyb25tZW50LlZhbHVlcy5WQUxJRF9JU1NVRVJTIH19"
  "AIRFLOW__SCHEDULER__RUN_DURATION": "NDMyMDA="
  "AIRFLOW__WEBSERVER__BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw"
  "AIRFLOW__WEBSERVER__EXPOSE_CONFIG": "RmFsc2U="
  "AIRFLOW__WEBSERVER__RBAC": "dHJ1ZQ=="
  "AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT": "MzYw"
  "AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT": "MzYw"
  "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  "BOOTSTRAP_ADMIN_USER": "dHJ1ZQ=="
  "ENVIRONMENT": "c3RhZ2luZw=="
  "GENERATION": "MQ=="
  "NEW_RELIC_ENVIRONMENT": ""
---
# Source: airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-webserver-config
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBhaXJmbG93Lnd3dy5zZWN1cml0eSBpbXBvcnQgQWlyZmxvd1NlY3VyaXR5TWFuYWdlcgppbXBvcnQgbG9nZ2luZwpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBMaXN0LCBVbmlvbgppbXBvcnQgb3MKZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfT0FVVEgKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQpsb2cuc2V0TGV2ZWwob3MuZ2V0ZW52KCJBSVJGTE9XX19MT0dHSU5HX19GQUJfTE9HR0lOR19MRVZFTCIsICJJTkZPIikpCgpTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSSA9IGNvbmYuZ2V0KCdjb3JlJywgJ1NRTF9BTENIRU1ZX0NPTk4nKQoKIyBpZiB3ZSBzaG91bGQgcmVwbGFjZSBBTEwgdGhlIHVzZXIncyByb2xlcyBlYWNoIGxvZ2luLCBvciBvbmx5IG9uIHJlZ2lzdHJhdGlvbgpBVVRIX1JPTEVTX1NZTkNfQVRfTE9HSU4gPSBUcnVlCgojIGZvcmNlIHVzZXJzIHRvIHJlLWF1dGggYWZ0ZXIgMzBtaW4gb2YgaW5hY3Rpdml0eSAodG8ga2VlcCByb2xlcyBpbiBzeW5jKQpQRVJNQU5FTlRfU0VTU0lPTl9MSUZFVElNRSA9IDE4MDAKCkFVVEhfVFlQRSA9IEFVVEhfT0FVVEgKCiMgcmVnaXN0cmF0aW9uIGNvbmZpZ3MKQVVUSF9VU0VSX1JFR0lTVFJBVElPTiA9IFRydWUgICMgYWxsb3cgdXNlcnMgd2hvIGFyZSBub3QgYWxyZWFkeSBpbiB0aGUgRkFCIERCCkFVVEhfVVNFUl9SRUdJU1RSQVRJT05fUk9MRSA9ICJQdWJsaWMiICAjIHRoaXMgcm9sZSB3aWxsIGJlIGdpdmVuIGluIGFkZGl0aW9uIHRvIGFueSBBVVRIX1JPTEVTX01BUFBJTkcKCkFVVEhfUk9MRVNfTUFQUElORyA9IHsKICAgICJFbmdpbmVlcmluZyIgOiBbIlZpZXdlciJdLAogICAgImRuYV9kYXRhX2VuZ2luZWVycyI6IFsiQWRtaW4iLCAiT3AiXSwKICAgICJkbmFfYW5hbHlzdHMiOiBbIlZpZXdlciJdLAogICAgImRuYV9kYXRhX3NjaWVudGlzdHMiOiBbIlZpZXdlciJdLAogICAgImRuYV9pbnRlcm5zIjogWyJWaWV3ZXIiXSwKfQoKIyB0aGUgbGlzdCBvZiBwcm92aWRlcnMgd2hpY2ggdGhlIHVzZXIgY2FuIGNob29zZSBmcm9tCk9BVVRIX1BST1ZJREVSUyA9IFsKICAgICAgICB7CiAgICAgICAgICAgICduYW1lJzogJ29rdGEnLAogICAgICAgICAgICAnaWNvbic6ICdmYS1jaXJjbGUtbycsCiAgICAgICAgICAgICd0b2tlbl9rZXknOiAnYWNjZXNzX3Rva2VuJywKICAgICAgICAgICAgJ3JlbW90ZV9hcHAnOiB7CiAgICAgICAgICAgICAgICAnY2xpZW50X2lkJzogJzBvYW9kZGU3MXI1QzA4RndHMHg3JywKICAgICAgICAgICAgICAgICdjbGllbnRfc2VjcmV0JzogJzBuUEFpU1JnMXc2VVhPTXNKLTBqcUw1eExNT0VuYjZVMWVqMXNDc0cnLAogICAgICAgICAgICAgICAgJ2FwaV9iYXNlX3VybCc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxLycsCiAgICAgICAgICAgICAgICAncmVkaXJlY3RfdXJpJzogJ2h0dHBzOi8vYWlyZmxvdzIuazhzLmRhdGEtb3JnLnN0YWdpbmcuZWFybmVzdC5jb20vX29hdXRoJywKICAgICAgICAgICAgICAgICdjbGllbnRfa3dhcmdzJzogewogICAgICAgICAgICAgICAgICAgICdzY29wZSc6ICdvcGVuaWQgcHJvZmlsZSBwaG9uZSBlbWFpbCBhZGRyZXNzIGdyb3VwcycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnYWNjZXNzX3Rva2VuX3VybCc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxL3Rva2VuJywKICAgICAgICAgICAgICAgICdhdXRob3JpemVfdXJsJzogJ2h0dHBzOi8vbWVldGVhcm5lc3Qub2t0YS5jb20vb2F1dGgyL2RlZmF1bHQvdjEvYXV0aG9yaXplJywKICAgICAgICAgICAgICAgICdqd2tzX3VyaSc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxL2tleXMnCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCgojIEZBQl9TRUNVUklUWV9NQU5BR0VSX0NMQVNTID0gImFpcmZsb3cuYXV0aC5Pa3RhR3JvdXBBdXRob3JpemVyIg=="
---
# Source: airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygwKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer-certs
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  client.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBM2N4TUJ4NEg2N2pVcDYxUlpObHcvVEU2dnk1Z0cxZEN4WGpxWmJSRUozdU5vYWd1CjA0VG5OQnJRQ2grVVN0UXJHRWhrTEZSajRnV0UvQTJUbHFoMG1pUVBNMGd0UCtHQTBTRnMvejJjRXYxN2Z2cEcKcFE0eEFvUm96VEVDMkl2eWdVRWl6cStZdVl4aXFVSUdnY0ZRL044am8zWUZONHN2VldZYVNqazBxdENXa0NRRApsdWZYaTM2cFVsNEo1aHpQWm9TcHF1bk1tc2tLUlo0RmN5bDUwczQyeVd0eWVacWV4RTNHbjJzekFKV01hd0ppClRvWS9lRitoQTZWbEFIZWF6Zm9JTlIzVCtueDNJbHhVWWpCZjhyUktMZXhSYi95eEFhRjZMN3ZjMjZVM0VZTVYKbnB2WDN1cGZxbnZYYyt6eEgzZDNaUWM1bXJ0VGM3NWRpeE42S1FJREFRQUJBb0lCQUhsTUhoUVNYMkNSbjNMbgovVWg3QmlqaHdIQUhxN1dvSGpNaXNvWFdkU05tbFlsZ0VlUEpuaXZIc2hpbk5wRkp3UnV4azE4TzgrVUxBYlJhCnRHbERUU2x6S1FEeHF4VnhmT0ppTmxyTVZjdW81dDRGZjVjSzBOREFteFFFaHJyb3BrSDczazVNaCtpSmx2ZGIKelhVdXhOeldKNFpncCsrOVpiQjllMGsyU2RCVDZCRXc0M1BVcndTYnpURmh3aTExSVVTZWtRQ1JzVVNXWHBURgpUUWR3VXRBeUpWWHV2L0l6STdvOStiYkNnR3Z2aG84ZmZIeVRzZWNrRlBmcC9lYlJYRk9Ha2RXbGROS1JkenFZCncvcldpTGJVdWJkMUJNWEIxNGdpYjdnT25WcC9vSjZpcHhJWEN1QjJnR2Mxc1NFK25seVd2ZXpVMHcrZ0xMcUsKRGMzZU13VUNnWUVBNXZ1ZFNoamNUN2NVTVBMaW1ZVDVLVE8xd1o1SkgwOWgyUWloOEE4NGRaU1R4anIrOU9JaApUd3VSdm95Q3ZDZElnRThRYVZoOGlEbmUrejhnSHBsTTA2RDRENjRvampQY3puS1lYbzZWRDl6T01FQ0JFdTNYCkV2dDZnUDJrM2VOa3BUMUZLeXpWTW1ZNXByUWFXYVNIYk4vY3Nldld3VkRwZnFJb0UzTVJiRnNDZ1lFQTlkSUUKaWJQdG83K1JXVjllUllIMjkzb0FFbko2RzVVVE53UUFYUXBPUlBIWVVUTVRZd1Y0WG4xcXRuTVBuS016N2lCMQpnN1R1YTVjZFRLMWttVUphR3JCR3RZeUcvSkErbXg5S2ZQUkgycVN5NSt1ZEhORnRFZ09KeXdzZCtvTU1hY0hECkNSM3B5QVlsNEpsZVV5ZVd0OUVrZzR5NTdseEVkK3hmbzNURkNzc0NnWUFvcDVxOG92bUw4azVVZXp1VkI4bVAKRGZIc3ZUNWppMlpPZSsxOHdrRU91UEwxamdhMzlXRWxkNFRVaEFpeXN6dFlraEh5YU1lcWRuMGZ2Ykdha1NMcgprTVo0aEEvUlQ2R0ttTExtMmJPMDBnbGNoczN4RmZtbjlxbE9NTmFtMDFJd24wTWdZVWk1RVRNT2UxNno3bmlECm1qZE8vWktUL2ZqSytDR1Rvc29yUndLQmdEOEdtTmxCZzZWZlFZSDduSzBQbEdXQkp6R1RubEVpR0tvYllZaDUKVXZZRVYrVUJ4bSsyQUZXaHJGR1pFS0NsaTNQN2FJWGJSdUhZL2M4aUNjL3RuaktIamFtUW5TOTJRRWIvYjlhMwp2eENFOThYVXVCU2ljV2VUOXFsVGNWMUFhbGRYTVkxTjJSbkswYjFUTlViMnVJTHFvWVVFK01ydlp6S2tMU1U0CmxDaWZBb0dBQlFRQzlYckZ0YXo3QVhETXFCbnVVVGtPdWZtelNwazJlVmFTSk1QYXlBNVVRUERXNlhkUXNrclUKTGVuVVVydVpyWi9iV0d4S01LTGxucTRDcFR1eUlVdE5yakVsNHdCOC93R1VubkZNQnZaR0M3cXBSMk5SRGJNSgpDckhuU2d4SFh5ejRRa0FNM2dYUjlHZlhOQ2lmUkIrM3l0VDAzRzNyY0NkZDRNd1dTRWM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  client.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lSQUpwZmVkK0xIaGRjWjZwYkhNK2NoK1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmJHOWpZV3hvYjNOME1CNFhEVEl5TURjd05URTVNVFV4TVZvWERUSXpNRGN3TlRFNQpNVFV4TVZvd0ZERVNNQkFHQTFVRUF4TUpiRzlqWVd4b2IzTjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzY3hNQng0SDY3alVwNjFSWk5sdy9URTZ2eTVnRzFkQ3hYanFaYlJFSjN1Tm9hZ3UKMDRUbk5CclFDaCtVU3RRckdFaGtMRlJqNGdXRS9BMlRscWgwbWlRUE0wZ3RQK0dBMFNGcy96MmNFdjE3ZnZwRwpwUTR4QW9Sb3pURUMySXZ5Z1VFaXpxK1l1WXhpcVVJR2djRlEvTjhqbzNZRk40c3ZWV1lhU2prMHF0Q1drQ1FECmx1ZlhpMzZwVWw0SjVoelBab1NwcXVuTW1za0tSWjRGY3lsNTBzNDJ5V3R5ZVpxZXhFM0duMnN6QUpXTWF3SmkKVG9ZL2VGK2hBNlZsQUhlYXpmb0lOUjNUK254M0lseFVZakJmOHJSS0xleFJiL3l4QWFGNkw3dmMyNlUzRVlNVgpucHZYM3VwZnFudlhjK3p4SDNkM1pRYzVtcnRUYzc1ZGl4TjZLUUlEQVFBQm96OHdQVEFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHdGNGNlk2OUZGNG1aNE1MWk0yZ0VpM2RjaEpnZFFZQW5BQwpQL1ZkWUtSRDE2Ry95aVJyWVVRcExuUWx6MHZjOVdSajZUWldZL3NMcWFPWk92cHpMS1VjZGtISHl5b0cvejNBCndmajZKcDVUQ3FjT05Md1UxRlI5Z3hmb1hJQ095a045WmE1QUxnbzNWTUt5d01tNHJJSERFUnNaN0RiN0Y2Q3QKRWhSbmwyM3hpNU4zOVNINDdLbzhCeEFraXZNV2V4c09IbGVHRFE4YjFZVnlKamtEL1ZTR1Q2WWpmb3krOTJmdApJMlRKMnVwKzc3ZnlPbEpLNFh6TytoLzZEVGhVSWk1allBdHM1YkdGMGZlUXVyaXhMRUVVeEhiUFE1WVNmc09NCk1kZUxCSEJpQ25hV0JzN1NodnJ4amtIZGhlSkpXdDBQZzQ3YUI2M0VJWDFOd3Y0OUQzcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pgbouncer.ini: "CltkYXRhYmFzZXNdCiogPSBob3N0PWRhdGEtYWlyZmxvdy0yLXBvc3RncmVzcWwuYWlyZmxvdy0yLnN2Yy5jbHVzdGVyLmxvY2FsIHBvcnQ9NTQzMgoKW3BnYm91bmNlcl0KcG9vbF9tb2RlID0gdHJhbnNhY3Rpb24KbWF4X2NsaWVudF9jb25uID0gMTAwMApkZWZhdWx0X3Bvb2xfc2l6ZSA9ICAyMAppZ25vcmVfc3RhcnR1cF9wYXJhbWV0ZXJzID0gZXh0cmFfZmxvYXRfZGlnaXRzCgpsaXN0ZW5fcG9ydCA9IDY0MzIKbGlzdGVuX2FkZHIgPSAqCgphdXRoX3R5cGUgPSBtZDUKYXV0aF9maWxlID0gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAoKbG9nX2Rpc2Nvbm5lY3Rpb25zID0gMApsb2dfY29ubmVjdGlvbnMgPSAwCgojIGxvY2tzIHdpbGwgbmV2ZXIgYmUgcmVsZWFzZWQgd2hlbiBgcG9vbF9tb2RlPXRyYW5zYWN0aW9uYCAoYWlyZmxvdyBpbml0ZGIvdXBncmFkZWRiIHNjcmlwdHMgY3JlYXRlIGxvY2tzKQpzZXJ2ZXJfcmVzZXRfcXVlcnkgPSBTRUxFQ1QgcGdfYWR2aXNvcnlfdW5sb2NrX2FsbCgpCnNlcnZlcl9yZXNldF9xdWVyeV9hbHdheXMgPSAxCgojIyBDTElFTlQgVExTIFNFVFRJTkdTICMjCmNsaWVudF90bHNfc3NsbW9kZSA9IHByZWZlcgpjbGllbnRfdGxzX2NpcGhlcnMgPSBub3JtYWwKY2xpZW50X3Rsc19rZXlfZmlsZSA9IC9ob21lL3BnYm91bmNlci9jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2NlcnRzL2NsaWVudC5jcnQKCiMjIFNFUlZFUiBUTFMgU0VUVElOR1MgIyMKc2VydmVyX3Rsc19zc2xtb2RlID0gcHJlZmVyCnNlcnZlcl90bHNfY2lwaGVycyA9IG5vcm1hbA=="
  gen_auth_file.sh: "CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI="
---
# Source: airflow/templates/sync/sync-connections-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_connections.py: ""
---
# Source: airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-airflow-2-pod-template
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pod_template.yaml: |-

    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: earnest-dockerhub
      serviceAccountName: data-airflow-2
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      containers:
        - name: base
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports: []
          command: []
          args: []
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
---
# Source: airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: data-airflow-2
subjects:
- kind: ServiceAccount
  name: data-airflow-2
  namespace: airflow-2
---
# Source: airflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
---
# Source: airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
    role: master
---
# Source: airflow/templates/pgbouncer/pgbouncer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: data-airflow-2
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
# Source: airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: data-airflow-2
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 5f00610c570937a76488380602536f1a0487c0dea26e2a421a63560257180aae
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-db-migrations
---
# Source: airflow/templates/pgbouncer/pgbouncer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      ## multiple pgbouncer pods can safely run concurrently
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-pgbouncer: 2ea543dc7bbf0f88674d0a8dd877530586f79bb5f66d195d53a1411991db5c3c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: data-airflow-2
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.17.0-patch.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - "/usr/bin/dumb-init"
            ## rewrite SIGTERM as SIGINT, so pgbouncer does a safe shutdown
            - "--rewrite=15:2"
            - "--"
          args:
            - "/bin/sh"
            - "-c"
            ## we generate users.txt on startup, because DATABASE_PASSWORD is defined from a Secret,
            ## and we want to pickup the new values on container restart (possibly due to livenessProbe failure)
            - |-
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-c"
                ## this check is intended to fail when the DATABASE_PASSWORD secret is updated,
                ## which would cause `gen_auth_file.sh` to run again on container start
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: data-airflow-2-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 0755
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
              ## CLIENT TLS FILES (CHART GENERATED)
              - secret:
                  name: data-airflow-2-pgbouncer-certs
                  items:
                    - key: client.key
                      path: client.key
                    - key: client.crt
                      path: client.crt
---
# Source: airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 957bc4c363e013340188a9c3d05fd69dfe79e5c68d4e34d1dc991e316fd35e79
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-scheduler
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: pod-template
          configMap:
            name: data-airflow-2-pod-template
---
# Source: airflow/templates/sync/sync-connections-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-connections
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-connections-script: c2b955a74b27c1c0bd181b4dc9132bbcfe7a18723dd8ef4b5edc708a28e37296
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-connections
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: sync-airflow-connections
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_connections.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
            - name: templates
              mountPath: "/mnt/templates"
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-connections
        - name: templates
          projected:
            sources:
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_ACCESS_KEY_ID"
                      path: "ACCESS_KEY_ID"
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_SECRET_ACCESS_KEY"
                      path: "SECRET_ACCESS_KEY"
---
# Source: airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: 654e9d412e153d07bc05f45bcd9e3dc7ae71e2fd91aa86056b952c81036c2f6f
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: sync-airflow-users
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-users
---
# Source: airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-triggerer
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
---
# Source: airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: e9504c20ef1a00f9bd8740fe2c064b483ca91d63d29904f447cba747e2626385
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: 43a8e8f1a06c5694d97619685fd9576cb63c01c7fd3377c26672515316747f0c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: install-pip-packages
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - |
              unset PYTHONUSERBASE && \
              pip install --user "Flask-AppBuilder==3.4.5" "Authlib==1.0.1"  && \
              echo "copying '/home/airflow/.local/*' to '/opt/home-airflow-local'..." && \
              cp -r /home/airflow/.local/* /opt/home-airflow-local
          volumeMounts:
            - name: home-airflow-local
              mountPath: /opt/home-airflow-local
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
      containers:
        - name: airflow-web
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 2.5Gi
            requests:
              cpu: 250m
              memory: 2.5Gi
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Staging"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: home-airflow-local
          emptyDir: {}
        - name: webserver-config
          secret:
            secretName: data-airflow-2-webserver-config
            defaultMode: 0644
---
# Source: airflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  serviceName: data-airflow-2-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "data-airflow-2"
      role: master
  template:
    metadata:
      name: data-airflow-2-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "data-airflow-2"
        heritage: "Helm"
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']

      containers:
        - name: data-airflow-2-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "airflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: airflow/templates/webserver/webserver-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-airflow-2-web
  annotations:
    custom: airflow
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  rules:
    - host: airflow2.k8s.data-org.staging.earnest.com
      http:
        paths:
          - path:
            pathType: ImplementationSpecific
            backend:
              service:
                name: data-airflow-2-web
                port:
                  name: web
---
# Source: airflow/templates/rbac/airflow-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
---
# Source: airflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YWlyZmxvdw=="
---
# Source: airflow/templates/config/secret-config-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-config-envs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "RXRjL1VUQw=="

  ## ================
  ## Database Configs
  ## ================
  ## database host/port
  DATABASE_HOST: "ZGF0YS1haXJmbG93LTItcGdib3VuY2VyLmFpcmZsb3ctMi5zdmMuY2x1c3Rlci5sb2NhbA=="
  DATABASE_PORT: "NjQzMg=="

  ## database configs
  DATABASE_DB: "YWlyZmxvdw=="

  ## bash command which echos the URL encoded value of $DATABASE_USER
  DATABASE_USER_CMD: "ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki"

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: "ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg=="

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: "ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i"

  ## bash command which echos the DB connection string in `psql` cli format
  DATABASE_PSQL_CMD: "ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig=="

  ## ================
  ## Redis Configs
  ## ================

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: "L29wdC9haXJmbG93L2RhZ3MvcmVwby9kYWdz"
  AIRFLOW__CORE__EXECUTOR: "S3ViZXJuZXRlc0V4ZWN1dG9y"
  AIRFLOW__CORE__FERNET_KEY: "N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0="
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic="
  AIRFLOW__WEBSERVER__SECRET_KEY: "VEhJUyBJUyBVTlNBRkUh"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "ODA4MA=="
  AIRFLOW__CELERY__FLOWER_PORT: "NTU1NQ=="
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "NjA="

  ## ================
  ## Airflow Configs (Triggerer)
  ## ================
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "MTAwMA=="

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "L29wdC9haXJmbG93L2xvZ3M="
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c="
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: "L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy"

  ## ================
  ## Airflow Configs (Celery)
  ## ================

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "ZWFybmVzdC9haXJmbG93XzI="
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "Mi4yLjUuMy0yNGVkOWE0LWxpbnV4LWFtZDY0"
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "L29wdC9haXJmbG93L3BvZF90ZW1wbGF0ZXMvcG9kX3RlbXBsYXRlLnlhbWw="

  ## ================
  ## User Configs
  ## ================
  "AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT": "MzAw"
  "AIRFLOW__CORE__ENABLE_XCOM_PICKLING": "dHJ1ZQ=="
  "AIRFLOW__CORE__ENCRYPT_S3_LOGS": "ZmFsc2U="
  "AIRFLOW__CORE__LOAD_EXAMPLES": "RmFsc2U="
  "AIRFLOW__CORE__LOGGING_LEVEL": "SU5GTw=="
  "AIRFLOW__CORE__PARALLELISM": "MTAw"
  "AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER": "czM6Ly9lYXJuZXN0LXByb2R1Y3Rpb24tZGF0YS1pbmZyYXN0cnVjdHVyZS1haXJmbG93LWxvZ3MvYWlyZmxvdzIvbG9ncw=="
  "AIRFLOW__CORE__REMOTE_LOGGING": "dHJ1ZQ=="
  "AIRFLOW__CORE__REMOTE_LOG_CONN_ID": "YWlyZmxvd19hd3NfbG9nZ2luZw=="
  "AIRFLOW__KUBERNETES_SECRETS__VAULT_TOKEN": "YWlyZmxvdy1kYWdzLXNlY3JldHM9dmF1bHRfdG9rZW4="
  "AIRFLOW__KUBERNETES__NAMESPACE": "YWlyZmxvdy0y"
  "AIRFLOW__KUBERNETES__RUN_AS_USER": "MTAwMA=="
  "AIRFLOW__OIDC__OVERWRITE_REDIRECT_URI": "aHR0cHM6Ly9haXJmbG93Mi5wcm9kdWN0aW9uLmVhcm5lc3QuY29tL2F1dGhvcml6YXRpb24tY29kZS9jYWxsYmFjaw=="
  "AIRFLOW__OIDC__VALID_ISSUERS": "e3sgLkVudmlyb25tZW50LlZhbHVlcy5WQUxJRF9JU1NVRVJTIH19"
  "AIRFLOW__SCHEDULER__RUN_DURATION": "NDMyMDA="
  "AIRFLOW__WEBSERVER__BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw"
  "AIRFLOW__WEBSERVER__EXPOSE_CONFIG": "RmFsc2U="
  "AIRFLOW__WEBSERVER__RBAC": "dHJ1ZQ=="
  "AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT": "MzYw"
  "AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT": "MzYw"
  "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  "BOOTSTRAP_ADMIN_USER": "dHJ1ZQ=="
  "ENVIRONMENT": "cHJvZHVjdGlvbg=="
  "GENERATION": "MQ=="
  "NEW_RELIC_ENVIRONMENT": ""
---
# Source: airflow/templates/config/secret-webserver-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-webserver-config
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  webserver_config.py: "ZnJvbSBhaXJmbG93Lnd3dy5zZWN1cml0eSBpbXBvcnQgQWlyZmxvd1NlY3VyaXR5TWFuYWdlcgppbXBvcnQgbG9nZ2luZwpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBMaXN0LCBVbmlvbgppbXBvcnQgb3MKZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfT0FVVEgKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQpsb2cuc2V0TGV2ZWwob3MuZ2V0ZW52KCJBSVJGTE9XX19MT0dHSU5HX19GQUJfTE9HR0lOR19MRVZFTCIsICJJTkZPIikpCgpTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSSA9IGNvbmYuZ2V0KCdjb3JlJywgJ1NRTF9BTENIRU1ZX0NPTk4nKQoKIyBpZiB3ZSBzaG91bGQgcmVwbGFjZSBBTEwgdGhlIHVzZXIncyByb2xlcyBlYWNoIGxvZ2luLCBvciBvbmx5IG9uIHJlZ2lzdHJhdGlvbgpBVVRIX1JPTEVTX1NZTkNfQVRfTE9HSU4gPSBUcnVlCgojIGZvcmNlIHVzZXJzIHRvIHJlLWF1dGggYWZ0ZXIgMzBtaW4gb2YgaW5hY3Rpdml0eSAodG8ga2VlcCByb2xlcyBpbiBzeW5jKQpQRVJNQU5FTlRfU0VTU0lPTl9MSUZFVElNRSA9IDE4MDAKCkFVVEhfVFlQRSA9IEFVVEhfT0FVVEgKCiMgcmVnaXN0cmF0aW9uIGNvbmZpZ3MKQVVUSF9VU0VSX1JFR0lTVFJBVElPTiA9IFRydWUgICMgYWxsb3cgdXNlcnMgd2hvIGFyZSBub3QgYWxyZWFkeSBpbiB0aGUgRkFCIERCCkFVVEhfVVNFUl9SRUdJU1RSQVRJT05fUk9MRSA9ICJQdWJsaWMiICAjIHRoaXMgcm9sZSB3aWxsIGJlIGdpdmVuIGluIGFkZGl0aW9uIHRvIGFueSBBVVRIX1JPTEVTX01BUFBJTkcKCkFVVEhfUk9MRVNfTUFQUElORyA9IHsKICAgICJFbmdpbmVlcmluZyIgOiBbIlZpZXdlciJdLAogICAgImRuYV9kYXRhX2VuZ2luZWVycyI6IFsiQWRtaW4iLCAiT3AiXSwKICAgICJkbmFfYW5hbHlzdHMiOiBbIlZpZXdlciJdLAogICAgImRuYV9kYXRhX3NjaWVudGlzdHMiOiBbIlZpZXdlciJdLAogICAgImRuYV9pbnRlcm5zIjogWyJWaWV3ZXIiXSwKfQoKIyB0aGUgbGlzdCBvZiBwcm92aWRlcnMgd2hpY2ggdGhlIHVzZXIgY2FuIGNob29zZSBmcm9tCk9BVVRIX1BST1ZJREVSUyA9IFsKICAgICAgICB7CiAgICAgICAgICAgICduYW1lJzogJ29rdGEnLAogICAgICAgICAgICAnaWNvbic6ICdmYS1jaXJjbGUtbycsCiAgICAgICAgICAgICd0b2tlbl9rZXknOiAnYWNjZXNzX3Rva2VuJywKICAgICAgICAgICAgJ3JlbW90ZV9hcHAnOiB7CiAgICAgICAgICAgICAgICAnY2xpZW50X2lkJzogJzBvYW9kZGU3MXI1QzA4RndHMHg3JywKICAgICAgICAgICAgICAgICdjbGllbnRfc2VjcmV0JzogJzBuUEFpU1JnMXc2VVhPTXNKLTBqcUw1eExNT0VuYjZVMWVqMXNDc0cnLAogICAgICAgICAgICAgICAgJ2FwaV9iYXNlX3VybCc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxLycsCiAgICAgICAgICAgICAgICAncmVkaXJlY3RfdXJpJzogJ2h0dHBzOi8vYWlyZmxvdzIuazhzLmRhdGEtb3JnLnByb2R1Y3Rpb24uZWFybmVzdC5jb20vX29hdXRoJywKICAgICAgICAgICAgICAgICdjbGllbnRfa3dhcmdzJzogewogICAgICAgICAgICAgICAgICAgICdzY29wZSc6ICdvcGVuaWQgcHJvZmlsZSBwaG9uZSBlbWFpbCBhZGRyZXNzIGdyb3VwcycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnYWNjZXNzX3Rva2VuX3VybCc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxL3Rva2VuJywKICAgICAgICAgICAgICAgICdhdXRob3JpemVfdXJsJzogJ2h0dHBzOi8vbWVldGVhcm5lc3Qub2t0YS5jb20vb2F1dGgyL2RlZmF1bHQvdjEvYXV0aG9yaXplJywKICAgICAgICAgICAgICAgICdqd2tzX3VyaSc6ICdodHRwczovL21lZXRlYXJuZXN0Lm9rdGEuY29tL29hdXRoMi9kZWZhdWx0L3YxL2tleXMnCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCgojIEZBQl9TRUNVUklUWV9NQU5BR0VSX0NMQVNTID0gImFpcmZsb3cuYXV0aC5Pa3RhR3JvdXBBdXRob3JpemVyIg=="
---
# Source: airflow/templates/db-migrations/db-migrations-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  db_migrations.py: "CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygwKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp"
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer-certs
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  client.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMVlvamtyMEpadXc5dXBiSGVUaEVFbTZHaFRML25PdzRMSEtWSThHQWpFVGdac3ZnCkRsSjgrS0RGTTNoVFpBT3RJY2V6am9ndVBQaFQ4ZklIaUdvUU5Lb2U2RjhWQk9rMmhuSDVYYU9uYXNJdVZtaVYKdThId200YjU5cDYwcFREZDZzek5MczN0QWZjbGhBb0FMcWE0TVVpdjNCVEZQOVQyRWozNWs4MC8vWElzVEx0VgptTUpDL0hUVGw3U1IwWEFwRlJqK0h3dkZkOHdTT3krdTRqa0NraGhZOU8yRUxIQTRCUzJZR0RydHZwZFhIQitwCnRpZGJkSjdXaWtSNDgvZlhpeUhYREFMV0prSEZVVnNzRkhNOFBoVHZRdVpoNkJhR0dmVmxVcE90d0hBQVZPMmEKdjBtdDA4cWJyUnZHNmZZbEdBb3ltcis3N1Zkenl6WVd0NDQ3d3dJREFRQUJBb0lCQUc0NXFSVWttUWJVcVNSNApraXpEVzNmOEwxbndNanVwUDNIS0Q2dnVSVkdpZUFiMzlBYlFrNHV2U1R2QlA2SmZ0MjI1YkxrRkdJRUdXaWFJCm5WVFFFdDlzZFJuVGdzRVBOTUwvY0EzaTNSZGhkcFBKMW9pZG1ucGRtUWV4Y21QV3JxWjE0dS9uQWhGQ3BzM2EKYjYrbEJXMERMU3U0V1AwVEM1WHRBYmhHZVdKMExFMyt0cmluY2xMbjMvcythU0RuYU9tU0FrbUQyUG10NVJQKwphMk1mclZtZitzRjg1YXlmUzJUNU9OU2xhSzhadUkwRnRBeHlBQUdmZXFOZU5BeGVpcW1ZRWtHek1uVFNxREp5Cm56WE1sNy9PWkgzajg0MVJ6MWd5QkVyZ0JZRDVNS0VOb083YXhPbGNaNmhMWGVTdjlPeDh5eDJSMHlFdE84V0wKMFBEWVo1a0NnWUVBODYvdGN2ZzB6MG4yVm9YY0JIazlCK2hQTHZmU2tMLytpVVV3bnd4bnV2Sm5wcmkycDVDNQpUb2J1NmFOL1ZtYmRoUG1nM0lJRWx3eVZkays2L1lpTFZUbEhjVlZsSkhLZ2ZERlZXZ3RKQjJTWis2b0FjazhyCnVPZ0JWcmdjME1iYlAyT3lRSENsVUs3MEVnSldRaXUwYVpmK1R4S1dzYUpGWUMxM1ZwR1BsTGNDZ1lFQTRGUkIKTnphc3Zsemh2SjdWSHdubkVCQ25MbmdZbEM5cVVka045NFkrdTJ0QXNkeGg2WEJTcG9pOGZBN0FjSDYzelk3eApYWEJFUGdhdGErdnJkbXUyNjNZTzAyMmpzYWYzdW8yWjRYQ2k2eWw3aGtDeUtkdDBpaVcwMlk1a1RneFNDTWRLCmZPRWE2dWwwSlRZTzZmenNsQitPUlpMRFJtNlREcGZTcWh0Zi9WVUNnWUVBblVJNk5RaVNZL2N5SHBJUjgxMGUKRXAxTGhGN3ZwdlFQMmh3cGpXcGZBcGp1WlB3cys2UDh3ZjEzN3BUUlZ6dlkxcmlWbzlmUUNINVpjZGx3TGE5UgpZM1VzY3FvT05HQTR5d3kzTFAyOWFpVDA3aUMrV3daV2krUkZBT2FkeWVtYWthVFA0cUFQUHlzNFhPcmZLYUswCnNiUWhySHV0ZmdMZlRIcnEyWlhrRjY4Q2dZRUF0SUkzby9VajFWNHA2cndvSS95MDZGRnVKVTlQLzlXVGlON08KaFZHSm93ZnZtKzhJL20xNnBEUzg3bHAwY1ZFV0Y1c2hEeDNxVzdyRnkyU2dLTDhPQnJRTnhBV2lSYTh5QVBRMgpVWmh3RUNobUZDWjA5b2QzWkQ1cEl2S1lOZEZtSlZndjBRTFZ4UmNyZFZIbGVGVWtEU0RETzZxWDVWSE9sVnlICmtJZk1tcTBDZ1lFQXlYd1ZqZ0hPK3VueDVRWmFFeFNTVytnQ3V0d3FpZEJJSXgvUnY3M3MrNmVhTWhadEtZNGMKa0pHVWozam5PK0RHUWlQRXZvWFFHTlRhdlF3aUJpWElyWkxPRHlZY2ZXd1BDMkhsWHVqSmJwYW5taWsyNTgzSApBNVNZRjhxMDAvallMeWNXQzdheGpJVmU4aS9Zdk83RC83eHVSU0NjWVQvcDRERk9qb216QU1RPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  client.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lSQU1lbkZuaXlyTWZUV2tibk4rMVpkVFl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmJHOWpZV3hvYjNOME1CNFhEVEl5TURjd05URTVNVFV4T1ZvWERUSXpNRGN3TlRFNQpNVFV4T1Zvd0ZERVNNQkFHQTFVRUF4TUpiRzlqWVd4b2IzTjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWW9qa3IwSlp1dzl1cGJIZVRoRUVtNkdoVEwvbk93NExIS1ZJOEdBakVUZ1pzdmcKRGxKOCtLREZNM2hUWkFPdEljZXpqb2d1UFBoVDhmSUhpR29RTktvZTZGOFZCT2syaG5INVhhT25hc0l1Vm1pVgp1OEh3bTRiNTlwNjBwVERkNnN6TkxzM3RBZmNsaEFvQUxxYTRNVWl2M0JURlA5VDJFajM1azgwLy9YSXNUTHRWCm1NSkMvSFRUbDdTUjBYQXBGUmorSHd2RmQ4d1NPeSt1NGprQ2toaFk5TzJFTEhBNEJTMllHRHJ0dnBkWEhCK3AKdGlkYmRKN1dpa1I0OC9mWGl5SFhEQUxXSmtIRlVWc3NGSE04UGhUdlF1Wmg2QmFHR2ZWbFVwT3R3SEFBVk8yYQp2MG10MDhxYnJSdkc2ZllsR0FveW1yKzc3VmR6eXpZV3Q0NDd3d0lEQVFBQm96OHdQVEFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHemliU2VBR1F1UUpXQ0lkNE5URmVXVktZMk9xU2x3bVhPZApDTG9hUk1RY0dGWjBPcW1SalJxK3AvSFFjTXRKTTFtRXlrdEFFWlNFUHFuRDFsT0VibVoxSzZ0ZjE1MDdEdTlFCmtXcm5sOFNHQXNxdERLTms3OU9maXNRUjFjSmFzbTFZNUx5dzNXMGN5U0d3cUV4ekdraFd4U1M3TnpNVEZuVkkKTHhuNGxDTGZFdmxjc0haY2lNSWNwMS9GYUI5dDFYeldkVzAybDdpNkpXZ1p0NlUyVGp4YUluQVZWN2Fyam8xQwovMDZCcmJkNWlLTERmR3YwM2dFK0pJT3dKS1JHK2JPZ3M2M1lYbXhXdVF4YjhMUlB4V1ptU0pISEE5Q0tIeTZyClVQamZBNktPbDM5MFpzRVJHMit3Yjcrb1ZmNTRJdWVYNXBZUFNoUDM5YUFjWCtja2pGND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: airflow/templates/pgbouncer/pgbouncer-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pgbouncer.ini: "CltkYXRhYmFzZXNdCiogPSBob3N0PWRhdGEtYWlyZmxvdy0yLXBvc3RncmVzcWwuYWlyZmxvdy0yLnN2Yy5jbHVzdGVyLmxvY2FsIHBvcnQ9NTQzMgoKW3BnYm91bmNlcl0KcG9vbF9tb2RlID0gdHJhbnNhY3Rpb24KbWF4X2NsaWVudF9jb25uID0gMTAwMApkZWZhdWx0X3Bvb2xfc2l6ZSA9ICAyMAppZ25vcmVfc3RhcnR1cF9wYXJhbWV0ZXJzID0gZXh0cmFfZmxvYXRfZGlnaXRzCgpsaXN0ZW5fcG9ydCA9IDY0MzIKbGlzdGVuX2FkZHIgPSAqCgphdXRoX3R5cGUgPSBtZDUKYXV0aF9maWxlID0gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAoKbG9nX2Rpc2Nvbm5lY3Rpb25zID0gMApsb2dfY29ubmVjdGlvbnMgPSAwCgojIGxvY2tzIHdpbGwgbmV2ZXIgYmUgcmVsZWFzZWQgd2hlbiBgcG9vbF9tb2RlPXRyYW5zYWN0aW9uYCAoYWlyZmxvdyBpbml0ZGIvdXBncmFkZWRiIHNjcmlwdHMgY3JlYXRlIGxvY2tzKQpzZXJ2ZXJfcmVzZXRfcXVlcnkgPSBTRUxFQ1QgcGdfYWR2aXNvcnlfdW5sb2NrX2FsbCgpCnNlcnZlcl9yZXNldF9xdWVyeV9hbHdheXMgPSAxCgojIyBDTElFTlQgVExTIFNFVFRJTkdTICMjCmNsaWVudF90bHNfc3NsbW9kZSA9IHByZWZlcgpjbGllbnRfdGxzX2NpcGhlcnMgPSBub3JtYWwKY2xpZW50X3Rsc19rZXlfZmlsZSA9IC9ob21lL3BnYm91bmNlci9jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2NlcnRzL2NsaWVudC5jcnQKCiMjIFNFUlZFUiBUTFMgU0VUVElOR1MgIyMKc2VydmVyX3Rsc19zc2xtb2RlID0gcHJlZmVyCnNlcnZlcl90bHNfY2lwaGVycyA9IG5vcm1hbA=="
  gen_auth_file.sh: "CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI="
---
# Source: airflow/templates/sync/sync-connections-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_connections.py: ""
---
# Source: airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  sync_users.py: ""
---
# Source: airflow/templates/config/configmap-pod-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-airflow-2-pod-template
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
data:
  pod_template.yaml: |-

    apiVersion: v1
    kind: Pod
    metadata:
      name: dummy-name
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: earnest-dockerhub
      serviceAccountName: data-airflow-2
      shareProcessNamespace: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      containers:
        - name: base
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            ## KubernetesExecutor Pods use LocalExecutor internally
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "20"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports: []
          command: []
          args: []
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
---
# Source: airflow/templates/rbac/airflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "create"
  - "get"
  - "delete"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "get"
---
# Source: airflow/templates/rbac/airflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: data-airflow-2
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: data-airflow-2
subjects:
- kind: ServiceAccount
  name: data-airflow-2
  namespace: airflow-2
---
# Source: airflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
---
# Source: airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "data-airflow-2"
    role: master
---
# Source: airflow/templates/pgbouncer/pgbouncer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: data-airflow-2
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
# Source: airflow/templates/webserver/webserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: data-airflow-2
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: airflow/templates/db-migrations/db-migrations-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 5f00610c570937a76488380602536f1a0487c0dea26e2a421a63560257180aae
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/db_migrations.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-db-migrations
---
# Source: airflow/templates/pgbouncer/pgbouncer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      ## multiple pgbouncer pods can safely run concurrently
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-pgbouncer: 2ea543dc7bbf0f88674d0a8dd877530586f79bb5f66d195d53a1411991db5c3c
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: data-airflow-2
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.17.0-patch.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - "/usr/bin/dumb-init"
            ## rewrite SIGTERM as SIGINT, so pgbouncer does a safe shutdown
            - "--rewrite=15:2"
            - "--"
          args:
            - "/bin/sh"
            - "-c"
            ## we generate users.txt on startup, because DATABASE_PASSWORD is defined from a Secret,
            ## and we want to pickup the new values on container restart (possibly due to livenessProbe failure)
            - |-
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-c"
                ## this check is intended to fail when the DATABASE_PASSWORD secret is updated,
                ## which would cause `gen_auth_file.sh` to run again on container start
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: data-airflow-2-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 0755
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
              ## CLIENT TLS FILES (CHART GENERATED)
              - secret:
                  name: data-airflow-2-pgbouncer-certs
                  items:
                    - key: client.key
                      path: client.key
                    - key: client.crt
                      path: client.crt
---
# Source: airflow/templates/scheduler/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple schedulers can run concurrently (Airflow 2.0)
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-pod-template: 04c1231baa675ef2e70b6a94f7dc33a8de0018ec2aceaadda5cc2383e5b445a2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-scheduler
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n -1"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: pod-template
          configMap:
            name: data-airflow-2-pod-template
---
# Source: airflow/templates/sync/sync-connections-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-connections
  labels:
    app: airflow
    component: sync-connections
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-connections
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-connections-script: c2b955a74b27c1c0bd181b4dc9132bbcfe7a18723dd8ef4b5edc708a28e37296
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-connections
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: sync-airflow-connections
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_connections.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
            - name: templates
              mountPath: "/mnt/templates"
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-connections
        - name: templates
          projected:
            sources:
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_ACCESS_KEY_ID"
                      path: "ACCESS_KEY_ID"
              - secret:
                  name: "log-aws-token"
                  items:
                    - key: "AWS_SECRET_ACCESS_KEY"
                      path: "SECRET_ACCESS_KEY"
---
# Source: airflow/templates/sync/sync-users-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    ## only 1 replica should run at a time
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: 654e9d412e153d07bc05f45bcd9e3dc7ae71e2fd91aa86056b952c81036c2f6f
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      securityContext:
        fsGroup: 0
      serviceAccountName: data-airflow-2
      initContainers:
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: sync-airflow-users
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "python"
            - "-u"
            - "/mnt/scripts/sync_users.py"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
        ## git-sync is included so "airflow plugins" & "python packages" can be stored in the dags repo
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: data-airflow-2-sync-users
---
# Source: airflow/templates/triggerer/triggerer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-triggerer
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
---
# Source: airflow/templates/webserver/webserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-airflow-2-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: data-airflow-2
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1d9c0774bf8087e795ddb7fa025a7ce721d627ba8fd670f5df51d141cee10f63
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: cab8689e8b371d871dd16c69fb7ef86760bc35d7d914ef2e790029dcf7411151
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: data-airflow-2
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: earnest-dockerhub
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      serviceAccountName: data-airflow-2
      securityContext:
        fsGroup: 0
      initContainers:
        - name: install-pip-packages
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - |
              unset PYTHONUSERBASE && \
              pip install --user "Flask-AppBuilder==3.4.5" "Authlib==1.0.1"  && \
              echo "copying '/home/airflow/.local/*' to '/opt/home-airflow-local'..." && \
              cp -r /home/airflow/.local/* /opt/home-airflow-local
          volumeMounts:
            - name: home-airflow-local
              mountPath: /opt/home-airflow-local
        - name: dags-git-clone
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ONE_TIME
              value: "true"
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
        - name: check-db
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
        - name: wait-for-db-migrations
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
      containers:
        - name: airflow-web
          image: earnest/airflow_2:2.2.5.3-24ed9a4-linux-amd64
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources:
            limits:
              cpu: 500m
              memory: 2.5Gi
            requests:
              cpu: 250m
              memory: 2.5Gi
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow webserver"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: home-airflow-local
              mountPath: /home/airflow/.local
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
        - name: dags-git-sync
          image: k8s.gcr.io/git-sync/git-sync:v3.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65533
            runAsGroup: 65533
          resources:
            {}
          envFrom:
            - secretRef:
                name: data-airflow-2-config-envs
          env:
            - name: GIT_SYNC_ROOT
              value: "/dags"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_REPO
              value: "https://github.com/meetearnest/data-airflow-dags.git"
            - name: GIT_SYNC_BRANCH
              value: "Production"
            - name: GIT_SYNC_REV
              value: "HEAD"
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: username
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-http-git-secret
                  key: password
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: ENVIRONMENT
              valueFrom:
                secretKeyRef:
                  key: environment
                  name: airflow-dags-secrets
            - name: VAULT_URL
              valueFrom:
                secretKeyRef:
                  key: vault_url
                  name: airflow-dags-secrets
            - name: VAULT_PORT
              valueFrom:
                secretKeyRef:
                  key: vault_port
                  name: airflow-dags-secrets
            - name: VAULT_KEY
              valueFrom:
                secretKeyRef:
                  key: vault_key
                  name: airflow-dags-secrets
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  key: vault_token
                  name: airflow-dags-secrets
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: secret_key
                  name: airflow-dags-secrets
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AIRFLOW__KUBERNETES_ENVIRONMENT_VARIABLES__AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  key: fernet_key
                  name: airflow-dags-secrets
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: log-aws-token
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: log-aws-token
          volumeMounts:
            - name: dags-data
              mountPath: /dags
      volumes:
        - name: dags-data
          emptyDir: {}
        - name: logs-data
          emptyDir: {}
        - name: home-airflow-local
          emptyDir: {}
        - name: webserver-config
          secret:
            secretName: data-airflow-2-webserver-config
            defaultMode: 0644
---
# Source: airflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-airflow-2-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "data-airflow-2"
    heritage: "Helm"
spec:
  serviceName: data-airflow-2-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "data-airflow-2"
      role: master
  template:
    metadata:
      name: data-airflow-2-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "data-airflow-2"
        heritage: "Helm"
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']

      containers:
        - name: data-airflow-2-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: data-airflow-2-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "airflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: airflow/templates/webserver/webserver-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-airflow-2-web
  annotations:
    custom: airflow
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: data-airflow-2
    heritage: Helm
spec:
  rules:
    - host: airflow2.k8s.data-org.production.earnest.com
      http:
        paths:
          - path:
            pathType: ImplementationSpecific
            backend:
              service:
                name: data-airflow-2-web
                port:
                  name: web
